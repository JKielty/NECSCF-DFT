import matplotlib.pyplot as plt
import numpy
from pyscf import gto
from NECSCF.Nuclear import geom


mol=gto.Mole()
mol.atom = [['F',(0, 0, -1.3)],
            ['H',(0, 0, -0.0)],
            ['F',(0, 0, 1.3)]]
mol.basis = 'def2-SVP'
mol.charge = -1
mol.spin = 0
mol.build()

N = 100
NQ = 50
Q = geom.switch_geom(mol)
step = 0.01*1.88972612
v = 0
DisVector = numpy.array([[0.00000, 0.00000, -0.00000],
                      [0.00000, 0.00000,  1.00000],
                      [0.00000, 0.00000,  0.00000]])

Geom_k = numpy.array(geom.geom_gen(Q, DisVector, N, NQ, step/1.88972612))
HF_distance = Geom_k[:, 1, 2] + 1.3



e_bo =  numpy.array([-198.79951462, -198.80456941, -198.80919036, -198.81340946, -198.81725655,
 -198.82075950, -198.82394427, -198.82683505, -198.82945439, -198.83182328,
 -198.83396127, -198.83588659, -198.83761626, -198.83916613, -198.84055096,
 -198.84178450, -198.84287954, -198.84384796, -198.84470079, -198.84544830,
 -198.84610003, -198.84666485, -198.84715104, -198.84756625, -198.84791761,
 -198.84821173, -198.84845471, -198.84865222, -198.84880948, -198.84893135,
 -198.84902228, -198.84908643, -198.84912763, -198.84914940, -198.84915499,
 -198.84914737, -198.84912928, -198.84910317, -198.84907130, -198.84903569,
 -198.84899817, -198.84896036, -198.84892370, -198.84888943, -198.84885864,
 -198.84883224, -198.84881095, -198.84879534, -198.84878581, -198.84878261,
 -198.84878581, -198.84879534, -198.84881095, -198.84883224, -198.84885864,
 -198.84888943, -198.84892370, -198.84896036, -198.84899817, -198.84903569,
 -198.84907130, -198.84910317, -198.84912928, -198.84914737, -198.84915499,
 -198.84914940, -198.84912763, -198.84908643, -198.84902228, -198.84893135,
 -198.84880948, -198.84865222, -198.84845471, -198.84821173, -198.84791761,
 -198.84756625, -198.84715104, -198.84666485, -198.84610003, -198.84544830,
 -198.84470079, -198.84384796, -198.84287954, -198.84178450, -198.84055096,
 -198.83916613, -198.83761626, -198.83588659, -198.83396127, -198.83182328,
 -198.82945439, -198.82683505, -198.82394427, -198.82075950, -198.81725655,
 -198.81340946, -198.80919036, -198.80456941, -198.79951462, -198.79399172])


e_lastv0 =  numpy.array([-152.97904279, -198.80450752, -198.80494732, -198.81284319, -198.81557147,
 -198.82017342, -198.82374842, -198.82675784, -198.82923214, -198.83131393,
 -198.83374668, -198.83564937, -198.83732783, -198.83889365, -198.83976915,
 -198.84145484, -198.84230932, -198.84373857, -198.84427718, -198.84507525,
 -198.84553915, -198.84641633, -198.84683295, -198.84755577, -198.84782658,
 -198.84639673, -198.82912086, -198.84812479, -198.84881329, -198.84888273,
 -198.84896683, -198.84902493, -198.84908089, -198.84911342, -198.84915029,
 -198.84914117, -198.84912025, -198.84909887, -198.84905942, -198.84903135,
 -198.84899705, -198.84895540, -198.84892199, -198.84888816, -198.84885670,
 -198.84883197, -198.84881032, -198.84879518, -198.84878577, -198.84878260,
 -198.84878580, -198.84879512, -198.84881061, -198.84883217, -198.84885863,
 -198.84888807, -198.84892372, -198.84895941, -198.84899393, -198.84902869,
 -198.84906905, -198.84910111, -198.84912535, -198.84913176, -198.84913478,
 -198.84913240, -198.84912964, -198.84903666, -198.84901544, -198.84882133,
 -198.84871739, -198.84863608, -198.84839499, -198.84453360, -198.84811629,
 -198.84676746, -198.84685905, -198.84660389, -198.84590792, -198.84512591,
 -198.84439861, -198.84369452, -198.84258212, -198.84176152, -198.84048167,
 -198.83904419, -198.83696525, -198.83437019, -198.83396170, -198.83136769,
 -198.82846185, -198.82588072, -198.82356494, -198.81934724, -198.81648279,
 -198.81247899, -198.80879689, -198.79558647, -198.79848022, -198.18433221])


e_2lastv1 =  numpy.array([-198.63333577, -198.80052356, -198.80788524, -198.81252773, -198.81664251,
 -198.81947440, -198.82410507, -198.82593652, -198.82865209, -198.83164797,
 -198.83404670, -198.83572165, -198.83736322, -198.83907994, -198.84023276,
 -198.84165399, -198.84278809, -198.84368203, -198.84463481, -198.84532862,
 -198.84605446, -198.84663071, -198.84712128, -198.84754169, -198.84792559,
 -198.84822032, -198.84845403, -198.84864860, -198.84880796, -198.84893157,
 -198.84902228, -198.84908504, -198.84912571, -198.84914473, -198.84914659,
 -198.84912328, -198.84911035, -198.84909896, -198.84904950, -198.84898180,
 -198.84900949, -198.84879465, -198.84885341, -198.84867232, -198.84800125,
 -198.84894331, -198.84727606, -198.84380358, -198.84383122, -198.17781309,
 -198.83667495, -198.84667956, -198.84644162, -198.84862081, -198.84893643,
 -198.84870372, -198.84878584, -198.84897893, -198.84892807, -198.84894922,
 -198.84896355, -198.84907308, -198.84907898, -198.84912608, -198.84916105,
 -198.84915212, -198.84912562, -198.84908613, -198.84902228, -198.84893143,
 -198.84880861, -198.84865742, -198.84845337, -198.84820280, -198.84792160,
 -198.84755205, -198.84711283, -198.84661850, -198.84606018, -198.84540261,
 -198.84470483, -198.84375841, -198.84291484, -198.84171594, -198.84043487,
 -198.83902407, -198.83764305, -198.83579108, -198.83407187, -198.83153731,
 -198.82876472, -198.82659919, -198.82414716, -198.82032395, -198.81650560,
 -198.81357526, -198.80731979, -198.80567240, -198.77889771, -198.72139705])


e_lastv1 =  numpy.array([-196.28212735, -198.80282055, -198.80564913, -198.81189505, -198.81673003,
 -198.82063808, -198.82286534, -198.82667688, -198.82912240, -198.84306791,
 -198.83370509, -198.83571909, -198.83757958, -198.83901079, -198.84063821,
 -198.84145061, -198.84274876, -198.84384239, -198.84463681, -198.84539726,
 -198.84599270, -198.84656207, -198.84716190, -198.84754495, -198.84790063,
 -198.84820061, -198.85172181, -198.84861691, -198.84880958, -198.84893094,
 -198.84902227, -198.84908610, -198.84912782, -198.84915019, -198.84914030,
 -198.84913344, -198.84910056, -198.84907099, -198.84907995, -198.84894839,
 -198.84892504, -198.84903091, -198.84871192, -198.84880373, -198.84836735,
 -198.84829703, -198.84948559, -198.84820618, -198.83240586, -200.23198141,
 -198.83942475, -198.84903275, -198.84779189, -198.84789686, -198.84797357,
 -198.84852871, -198.84885495, -198.84877363, -198.84893702, -198.84903284,
 -198.84903195, -198.84911559, -198.84911041, -198.84914447, -198.84914639,
 -198.84914444, -198.84912551, -198.84908629, -198.84902227, -198.84893052,
 -198.84880627, -198.84864405, -198.84931662, -198.84820539, -198.84785147,
 -198.84750838, -198.84710659, -198.84657587, -198.84600963, -198.84531568,
 -198.84461008, -198.84379093, -198.84274334, -198.84182700, -198.84042143,
 -198.83874603, -198.83765645, -198.83589173, -198.83376554, -198.83136423,
 -198.82953575, -198.82620086, -198.82293273, -198.82030749, -198.81651365,
 -198.81351333, -198.80684215, -198.79885671, -197.86465049, -200.05436086])


e_lastv1[49] = e_2lastv1[49] = -198.84820618

e_lastv1[98] = -198.79885671

e_lastv1[e_lastv1 > -198.848] = -198.848
e_lastv1[e_lastv1 < -198.8492] = -198.8492
e_2lastv1[e_2lastv1 > -198.848] = -198.848


mask = ((HF_distance[1:99] >= 1.12) & (HF_distance[1:99] <= 1.22)) | ((HF_distance[1:99] >= 1.38) & (HF_distance[1:99] <= 1.48))

x_smooth = HF_distance[1:99][mask]
y_smooth = e_2lastv1[1:99][mask]

coeffs = numpy.polyfit(x_smooth, y_smooth, deg=4)
poly = numpy.poly1d(coeffs)

y_hybrid = e_2lastv1[1:99].copy()
y_hybrid = poly(HF_distance[1:99])


'''
plt.plot(HF_distance[25:75], e_bo[25:75], 'go', HF_distance[25:75], e_bo[25:75], 'g--', label='BO', color='Black')
plt.plot(HF_distance[25:75], e_lastv0[25:75], 'go', HF_distance[25:75], e_lastv0[25:75], 'g--', label='it_last', color='Red')
#plt.title('FHF v = 0 (2.60 a.u.) energy for UKS w/o microiterations')
plt.legend()
#plt.xlim((1.1, 1.5))
#plt.ylim((-198.85, -198.846))
plt.ylabel('Energy / au')
plt.xlabel('FH-Distance / a.u.')
plt.savefig('v0_energy260.png')
'''

plt.plot(HF_distance[25:75], e_bo[25:75], 'go', HF_distance[25:75], e_bo[25:75], 'g--', label='BO', color='Black')
plt.plot(HF_distance[25:75], e_2lastv1[25:75], 'go', HF_distance[25:75], e_2lastv1[25:75], 'g--', label='it_2last', color='Blue')
plt.plot(HF_distance[25:75], y_hybrid[25:75], 'b-', label='Fitted')
#plt.title('FHF v = 0 (2.60 a.u.) energy for UKS w/o microiterations')
plt.legend()
#plt.xlim((1.1, 1.7))
#plt.ylim((-198.84, -198.82))
plt.ylabel('Energy / au')
plt.xlabel('FH-Distance / a.u.')
plt.savefig('v1_energy260.png')


'''
# V0 for F-F = 260:
bo_barrier = max(e_bo[40: 60]) - min(e_bo)
dft_barrier = max(e_bo[40: 60]) - e_lastv0[numpy.argmin(e_bo)]

print('BO Barrier:', bo_barrier)
print('NECSCF Barrier:', dft_barrier)
print('NECSCF correction:', dft_barrier - bo_barrier)
print('Correction %:', ((dft_barrier - bo_barrier) / bo_barrier)*100)
# v = 0
#BO barrier = 0.0003723799999875155
#NECSCF-DFT barrier = 0.00036769000001868335
#NECSCF correction: -4.689999968832126e-06
#Correction %: - 1.2622
'''


# V1 for F-F = 260:
bo_barrier = max(e_bo[40: 60]) - min(e_bo)
dft_barrier = max(y_hybrid[40:60]) - e_2lastv1[numpy.argmin(e_bo)]

print('BO Barrier:', bo_barrier)
print('NECSCF Barrier:', dft_barrier)
print('NECSCF correction:', 0.00040995707296559885 - bo_barrier)
print('Correction %:', ((0.00040995707296559885 - bo_barrier) / bo_barrier)*100)
# v = 1
#BO barrier = 0.0003723799999875155
#NECSCF-DFT barrier = 0.00040995707296559885
#NECSCF correction: 3.757707297808338e-05
#Correction %: 10.091055636538805
