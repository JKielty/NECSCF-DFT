import matplotlib.pyplot as plt
import numpy
from pyscf import gto
from NECSCF.Nuclear import geom

mol=gto.Mole()
mol.atom = [['F',(0, 0, -1.2)],
            ['H',(0, 0, -0.0)],
            ['F',(0, 0, 1.2)]]
mol.basis = 'def2-SVP'
mol.charge = -1
mol.spin = 0
mol.build()

N = 80
NQ = 40
Q = geom.switch_geom(mol)
step = 0.01*1.88972612
v = 0
DisVector = numpy.array([[0.00000, 0.00000, -0.00000],
                      [0.00000, 0.00000,  1.00000],
                      [0.00000, 0.00000,  0.00000]])

Geom_k = numpy.array(geom.geom_gen(Q, DisVector, N, NQ, step/1.88972612))
HF_distance = Geom_k[:, 1, 2] + 1.2



e_bo =  numpy.array([-198.80578083, -198.81099141, -198.81577412, -198.82016081, -198.82418119,
 -198.82786293, -198.83123181, -198.83431178, -198.83712511, -198.83969250,
 -198.84203319, -198.84416506, -198.84610474, -198.84786767, -198.84946820,
 -198.85091960, -198.85223417, -198.85342328, -198.85449742, -198.85546629,
 -198.85633883, -198.85712328, -198.85782724, -198.85845770, -198.85902105,
 -198.85952314, -198.85996928, -198.86036430, -198.86071258, -198.86101804,
 -198.86128423, -198.86151426, -198.86171093, -198.86187664, -198.86201345,
 -198.86212310, -198.86220696, -198.86226611, -198.86230129, -198.86231297,
 -198.86230129, -198.86226611, -198.86220696, -198.86212310, -198.86201345,
 -198.86187664, -198.86171093, -198.86151426, -198.86128423, -198.86101804,
 -198.86071258, -198.86036430, -198.85996928, -198.85952314, -198.85902105,
 -198.85845770, -198.85782724, -198.85712328, -198.85633883, -198.85546629,
 -198.85449742, -198.85342328, -198.85223417, -198.85091960, -198.84946820,
 -198.84786767, -198.84610474, -198.84416506, -198.84203319, -198.83969250,
 -198.83712511, -198.83431178, -198.83123181, -198.82786293, -198.82418119,
 -198.82016081, -198.81577412, -198.81099141, -198.80578083, -198.80010818])


e_finalv0 =  numpy.array([-198.80576391, -198.81093815, -198.81575264, -198.81996462, -198.82410082,
 -198.82780063, -198.83101789, -198.83406889, -198.83692213, -198.83957679,
 -198.84191908, -198.84399822, -198.84592843, -198.84787443, -198.84931655,
 -198.85085673, -198.85220994, -198.85335361, -198.85439929, -198.85542022,
 -198.85634790, -198.85706857, -198.85780114, -198.85845784, -198.85899799,
 -198.85951107, -198.85995357, -198.86036420, -198.86070449, -198.86102052,
 -198.86127637, -198.86150420, -198.86170255, -198.86187015, -198.86201130,
 -198.86212209, -198.86220622, -198.86226623, -198.86230122, -198.86231297,
 -198.86230123, -198.86226586, -198.86220542, -198.86212118, -198.86201165,
 -198.86187785, -198.86171196, -198.86150804, -198.86127778, -198.86099771,
 -198.86070322, -198.86036693, -198.85995554, -198.85949168, -198.85900536,
 -198.85843593, -198.85780104, -198.85708608, -198.85628866, -198.85538732,
 -198.85440944, -198.85332307, -198.85214525, -198.85079909, -198.84946512,
 -198.84773335, -198.84608506, -198.84407164, -198.84195540, -198.83951385,
 -198.83689188, -198.83415556, -198.83101088, -198.82766741, -198.82403477,
 -198.82016081, -198.81572205, -198.81088927, -198.80576480,  -198.80010131])


e_2lastv1 =  numpy.array([-198.63333577, -198.80052356, -198.80788524, -198.81252773, -198.81664251,
 -198.81947440, -198.82410507, -198.82593652, -198.82865209, -198.83164797,
 -198.83404670, -198.83572165, -198.83736322, -198.83907994, -198.84023276,
 -198.84165399, -198.84278809, -198.84368203, -198.84463481, -198.84532862,
 -198.84605446, -198.84663071, -198.84712128, -198.84754169, -198.84792559,
 -198.84822032, -198.84845403, -198.84864860, -198.84880796, -198.84893157,
 -198.84902228, -198.84908504, -198.84912571, -198.84914473, -198.84914659,
 -198.84912328, -198.84911035, -198.84909896, -198.84904950, -198.84898180,
 -198.84900949, -198.84879465, -198.84885341, -198.84867232, -198.84800125,
 -198.84894331, -198.84727606, -198.84380358, -198.84383122, -198.17781309,
 -198.83667495, -198.84667956, -198.84644162, -198.84862081, -198.84893643,
 -198.84870372, -198.84878584, -198.84897893, -198.84892807, -198.84894922,
 -198.84896355, -198.84907308, -198.84907898, -198.84912608, -198.84916105,
 -198.84915212, -198.84912562, -198.84908613, -198.84902228, -198.84893143,
 -198.84880861, -198.84865742, -198.84845337, -198.84820280, -198.84792160,
 -198.84755205, -198.84711283, -198.84661850, -198.84606018, -198.84540261,
 -198.84470483, -198.84375841, -198.84291484, -198.84171594, -198.84043487,
 -198.83902407, -198.83764305, -198.83579108, -198.83407187, -198.83153731,
 -198.82876472, -198.82659919, -198.82414716, -198.82032395, -198.81650560,
 -198.81357526, -198.80731979, -198.80567240, -198.77889771, -198.72139705])


e_lastv1 =  numpy.array([-198.36078773, -198.80631413, -198.82565689,-198.81860026, -198.82011233,
 -198.82738835, -198.83020085, -198.83409723, -198.83653597, -198.83954272,
 -198.84189272, -198.84296064, -198.84588349, -198.84766449, -198.84943003,
 -198.85082512, -198.85213073, -198.85336955, -198.85441689, -198.85502737,
 -198.85632347, -198.85710383, -198.85780057, -198.85841595, -198.85901211,
 -198.85952246, -198.85996647, -198.86033897, -198.86064387, -198.86088590,
 -198.86122635, -198.86105282, -198.86146105, -198.86153488, -198.86158702,
 -198.86155368, -198.85554237, -198.80093683, -198.71894222, -198.21853126,
 -198.85795751, -198.85721784, -198.85667075, -198.85926129, -198.85927519,
 -198.86178783, -198.86156297, -198.86081408, -198.86093347, -198.86088369,
 -198.86064776, -198.86036045, -198.85996055, -198.85952141, -198.85901570,
 -198.85844270, -198.85781816, -198.85698509, -198.85536348, -198.85532435,
 -198.85445412, -198.85339651, -198.85203666, -198.85071170, -198.84925077,
 -198.84771259, -198.84597354, -198.84409736, -198.84198251, -198.83852475,
 -198.83602541, -198.83402778, -198.82804410, -198.82679115, -198.82369607,
 -198.82016081, -198.85611447, -198.80883108, -198.79473903, -197.17258102])

'''
e_lastv1[49] = e_2lastv1[49] = -198.84820618

e_lastv1[98] = -198.79885671

e_lastv1[e_lastv1 > -198.848] = -198.848
e_lastv1[e_lastv1 < -198.8492] = -198.8492
e_2lastv1[e_2lastv1 > -198.848] = -198.848
'''

'''
plt.plot(HF_distance[1:-1], e_bo[1:-1], 'go', HF_distance[1:-1], e_bo[1:-1], 'g--', label='BO', color='Black')
plt.plot(HF_distance[1:-1], e_lastv0[1:-1], 'go', HF_distance[1:-1], e_lastv0[1:-1], 'g--', label='it_last', color='Red')
#plt.title('FHF v = 0 (2.60 a.u.) energy for UKS w/o microiterations')
plt.legend()
#plt.xlim((1.1, 1.5))
#plt.ylim((-198.85, -198.846))
plt.ylabel('Energy / au')
plt.xlabel('FH-Distance / a.u.')
plt.savefig('v0_energy260.png')
'''

plt.plot(HF_distance, e_bo, 'go', HF_distance, e_bo, 'g--', label='BO', color='Black')
plt.plot(HF_distance, e_finalv0, 'go', HF_distance, e_finalv0, 'g--', label='NECSCF-DFT', color='Red')
plt.plot(HF_distance, e_lastv1, 'go', HF_distance, e_lastv1, 'g--', label='v1', color='Blue')
#plt.title('FHF v = 0 (2.60 a.u.) energy for UKS w/o microiterations')
plt.legend()
#plt.xlim((1.1, 1.7))
#plt.ylim((-198.84, -198.82))
plt.ylabel('Energy / au')
plt.xlabel('FH-Distance / a.u.')
plt.savefig('v0_energy240.png')



# V0 for F-F = 240:
bo_barrier = max(e_bo[40: 60]) - min(e_bo)
dft_barrier = max(e_finalv0[40: 60]) - min(e_finalv0)

print('BO Barrier: No barrier')
print('NECSCF Barrier: No barrier')
print('NECSCF correction: N/A')

