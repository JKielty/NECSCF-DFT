import matplotlib.pyplot as plt
import numpy
from pyscf import gto
from NECSCF.Nuclear import geom


mol=gto.Mole()
mol.atom = [['F',(0, 0, -1.35)],
            ['H',(0, 0, -0.0)],
            ['F',(0, 0, 1.35)]]
mol.basis = 'def2-SVP'
mol.charge = -1
mol.spin = 0
mol.build()

N = 100
NQ = 50
Q = geom.switch_geom(mol)
step = 0.01*1.88972612
v = 0
DisVector = numpy.array([[0.00000, 0.00000, -0.00000],
                      [0.00000, 0.00000,  1.00000],
                      [0.00000, 0.00000,  0.00000]])

Geom_k = numpy.array(geom.geom_gen(Q, DisVector, N, NQ, step/1.88972612))
HF_distance = Geom_k[:, 1, 2] + 1.35



e_bo =  numpy.array([-198.81647039, -198.81956019, -198.82235329, -198.82487227, -198.82713820,
 -198.82917074, -198.83098821, -198.83260771, -198.83404520, -198.83531557,
 -198.83643267, -198.83740940, -198.83825777, -198.83898892, -198.83961326,
 -198.84014043, -198.84057946, -198.84093873, -198.84122605, -198.84144869,
 -198.84161340, -198.84172643, -198.84179363, -198.84182038, -198.84181172,
 -198.84177231, -198.84170648, -198.84161827, -198.84151143, -198.84138943,
 -198.84125547, -198.84111252, -198.84096331, -198.84081036, -198.84065598,
 -198.84050229, -198.84035124, -198.84020461, -198.84006403, -198.83993095,
 -198.83980672, -198.83969250, -198.83958934, -198.83949815, -198.83941970,
 -198.83935465, -198.83930351, -198.83926670, -198.83924449, -198.83923707,
 -198.83924449, -198.83926670, -198.83930351, -198.83935465, -198.83941970,
 -198.83949815, -198.83958934, -198.83969250, -198.83980672, -198.83993095,
 -198.84006403, -198.84020461, -198.84035124, -198.84050229, -198.84065598,
 -198.84081036, -198.84096331, -198.84111252, -198.84125547, -198.84138943,
 -198.84151143, -198.84161827, -198.84170648, -198.84177231, -198.84181172,
 -198.84182038, -198.84179363, -198.84172643, -198.84161340, -198.84144869,
 -198.84122605, -198.84093873, -198.84057946, -198.84014043, -198.83961326,
 -198.83898892, -198.83825777, -198.83740940, -198.83643267, -198.83531557,
 -198.83404520, -198.83260771, -198.83098821, -198.82917074, -198.82713820,
 -198.82487227, -198.82235329, -198.81956019, -198.81647039, -198.81305962])


e_finalv0 =  numpy.array([-198.81649829, -198.81949675, -198.82244071, -198.82446413, -198.82725853,
 -198.82932379, -198.83078056, -198.83239430, -198.83382018, -198.83510401,
 -198.83624542, -198.83692352, -198.83811363, -198.83910253, -198.83928279,
 -198.84002307, -198.84049785, -198.84072243, -198.84127090, -198.84138441,
 -198.84164779, -198.84175067, -198.84171563, -198.84179788, -198.84179638,
 -198.84175681, -198.84167964, -198.84161214, -198.84149899, -198.84138673,
 -198.84125323, -198.84111358, -198.84096258, -198.84080932, -198.84065605,
 -198.84050231, -198.84035124, -198.84020462, -198.84006400, -198.83993101,
 -198.83980647, -198.83969260, -198.83958924, -198.83949809, -198.83941963,
 -198.83935469, -198.83930353, -198.83926671, -198.83924449, -198.83923707,
 -198.83924450, -198.83926668, -198.83930342, -198.83935459, -198.83941961,
 -198.83949808, -198.83958944, -198.83969257, -198.83980663, -198.83993088,
 -198.84006400, -198.84020462, -198.84035124, -198.84050231, -198.84065558,
 -198.84080938, -198.84096256, -198.84111349, -198.84125002, -198.84138611,
 -198.84150700, -198.84159944, -198.84169757, -198.84176027, -198.84179191,
 -198.84176248, -198.84176186, -198.84163358, -198.84149149, -198.84130258,
 -198.84104848, -198.84087121, -198.84047381, -198.84021722, -198.83947654,
 -198.83883426, -198.83808195, -198.83753654, -198.83658057, -198.83478188,
 -198.83347085, -198.83238390, -198.83040189, -198.82893228, -198.82692348,
 -198.82487227, -198.82203323, -198.81937944, -198.81648441, -198.81306241])


e_lastv1 =  numpy.array([-198.74834008, -198.82199736, -198.81953334, -198.82333947, -198.82430260,
 -198.82980245, -198.83034549, -198.83207682, -198.83360410, -198.83555934,
 -198.83615196, -198.83719652, -198.83806755, -198.83884612, -198.83949041,
 -198.84019969, -198.84050759, -198.84076251, -198.84117969, -198.84141254,
 -198.84158986, -198.84173738, -198.84178494, -198.84181627, -198.84180793,
 -198.84177205, -198.84170619, -198.84161641, -198.84150650, -198.84139522,
 -198.84124092, -198.84109209, -198.84098730, -198.84069911, -198.84052932,
 -198.84033004, -198.84014852, -198.83990793, -198.83972000, -198.83972676,
 -198.83992797, -198.83935567, -198.83915127, -198.83830024, -198.83766943,
 -198.83818634, -198.84005396, -198.83337415, -198.85071508, -198.76897789,
 -198.81744718, -198.83453987, -198.84047634, -198.83812109, -198.83869644,
 -198.83910331, -198.83923808, -198.83941409, -198.83993518, -198.83977062,
 -198.83974868, -198.84027299, -198.84038900, -198.84054643, -198.84068751,
 -198.84084302, -198.84098084, -198.84112670, -198.84121939, -198.84138160,
 -198.84149882, -198.84161642, -198.84170668, -198.84177207, -198.84181269,
 -198.84181661, -198.84179958, -198.84170960, -198.84158763, -198.84135750,
 -198.84110125, -198.84088021, -198.84051030, -198.84003229, -198.83948841,
 -198.83884295, -198.83809487, -198.83719504, -198.83615423, -198.83500884,
 -198.83367454, -198.83211693, -198.82932257, -198.82848417, -198.82589690,
 -198.82487227, -198.82012723, -198.81351600, -198.79618836, -198.72780189])



'''
y_full = numpy.concatenate([e_bo[1:10], e_lastv0[15:85], e_bo[90:99]])

mask = ((HF_distance[20:80] >= 1.0) & (HF_distance[20:80] <= 1.15)) | ((HF_distance[20:80] >= 1.3) & (HF_distance[20:80] <= 1.5)) | ((HF_distance[20:80] >= 1.8) & (HF_distance[20:80] <= 1.9))

x_smoothv0 = HF_distance[20:80][mask]
y_smoothv0 = y_full[mask]

coeffsv0 = numpy.polyfit(x_smoothv0, y_smoothv0, deg=4)
polyv0 = numpy.poly1d(coeffsv0)

y_hybridv0 = e_lastv0[20:80].copy()
y_hybridv0 = polyv0(HF_distance[20:80])

'''


mask = ((HF_distance[15:85] >= 1.05) & (HF_distance[15:85] <= 1.3)) | ((HF_distance[15:85] >= 1.4) & (HF_distance[15:85] <= 1.65))

x_smoothv1 = HF_distance[15:85][mask]
y_smoothv1 = e_lastv1[15:85][mask]

coeffsv1 = numpy.polyfit(x_smoothv1, y_smoothv1, deg=4)
polyv1 = numpy.poly1d(coeffsv1)

y_hybridv1 = e_lastv1[15:85].copy()
y_hybridv1 = polyv1(HF_distance[15:85])


'''
plt.plot(HF_distance[20:80], e_bo[20:80], 'go', HF_distance[20:80], e_bo[20:80], 'g--', label='BO', color='Black')
plt.plot(HF_distance[20:80], e_finalv0[20:80], 'go', HF_distance[20:80], e_finalv0[20:80], 'g--', label='it_last', color='Red')
#plt.plot(HF_distance[20:80], y_hybridv0, 'b-', label='Fitted')
#plt.title('FHF v = 0 (2.60 a.u.) energy for UKS w/o microiterations')
plt.legend()
#plt.xlim((1.1, 1.5))
#plt.ylim((-198.85, -198.846))
plt.ylabel('Energy / au')
plt.xlabel('FH-Distance / a.u.')
plt.savefig('v0_energy270.png')
'''


e_lastv1[e_lastv1 > -198.835] = -198.835
e_lastv1[e_lastv1 < -198.844] = -198.844


plt.plot(HF_distance[15:85], e_bo[15:85], 'go', HF_distance[15:85], e_bo[15:85], 'g--', label='BO', color='Black')
plt.plot(HF_distance[15:85], e_lastv1[15:85], 'go', HF_distance[15:85], e_lastv1[15:85], 'g--', label='it_last', color='Red')
plt.plot(HF_distance[15:85], y_hybridv1, 'b-', label='Fitted')
#plt.title('FHF v = 0 (2.60 a.u.) energy for UKS w/o microiterations')
plt.legend()
#plt.xlim((1.1, 1.6))
#plt.ylim((-198.9, -198.2))
plt.ylabel('Energy / au')
plt.xlabel('FH-Distance / a.u.')
plt.savefig('v1_energy270.png')



# V0 for F-F = 270:
bo_barrier = max(e_bo[40: 60]) - min(e_bo)
dft_barrier = max(e_bo[40: 60]) - e_finalv0[numpy.argmin(e_bo)]
print('v = 0')
print('BO Barrier:', bo_barrier)
print('NECSCF Barrier:', dft_barrier)
print('NECSCF correction:', dft_barrier - bo_barrier)
print('Correction %:', ((dft_barrier - bo_barrier) / bo_barrier)*100)

# v = 0
#BO barrier = 0.0025833100000056675
#NECSCF-DFT barrier = 0.002560810000005631
#NECSCF correction: -2.250000000003638e-05
# Correction %: -0.870975608811448



# V1 for F-F = 270:
bo_barrier = max(e_bo[40: 60]) - min(e_bo)
dft_barrier = max(y_hybridv1[40: 60]) - e_lastv1[numpy.argmin(e_bo)]
print('v = 1')
print('BO Barrier:', bo_barrier)
print('NECSCF Barrier:', dft_barrier)
print('NECSCF correction:', bo_barrier - dft_barrier)
print('Correction %:', ((dft_barrier - bo_barrier) / bo_barrier)*100)

# v = 1
#BO barrier = 0.0025833100000056675
#NECSCF-DFT barrier = 0.0027788945267559484
#NECSCF correction: +0.00019558452675028093
# Correction %: + 7.571
