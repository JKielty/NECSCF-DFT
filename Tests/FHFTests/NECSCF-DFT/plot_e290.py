import matplotlib.pyplot as plt
import numpy
from pyscf import gto
from NECSCF.Nuclear import geom


mol=gto.Mole()
mol.atom = [['F',(0, 0, -1.45)],
            ['H',(0, 0, -0.0)],
            ['F',(0, 0, 1.45)]]
mol.basis = 'def2-SVP'
mol.charge = -1
mol.spin = 0
mol.build()

N = 100
NQ = 50
Q = geom.switch_geom(mol)
step = 0.01*1.88972612
v = 0
DisVector = numpy.array([[0.00000, 0.00000, -0.00000],
                      [0.00000, 0.00000,  1.00000],
                      [0.00000, 0.00000,  0.00000]])

Geom_k = numpy.array(geom.geom_gen(Q, DisVector, N, NQ, step/1.88972612))
HF_distance = Geom_k[:, 1, 2] + 1.45



e_bo =  numpy.array([-198.82560872, -198.8263666,  -198.82699222, -198.82749687, -198.82789106,
 -198.82818462, -198.82838669, -198.82850581, -198.82854996, -198.82852657,
 -198.82844255, -198.82830434, -198.82811794, -198.82788892, -198.82762248,
 -198.82732347, -198.82699641, -198.82664551, -198.82627472, -198.82588768,
 -198.82548781, -198.82507825, -198.82466195, -198.82424162, -198.82381981,
 -198.82339886, -198.82298094, -198.82256811, -198.82216224, -198.82176508,
 -198.82137826, -198.82100328, -198.82064153, -198.82029426, -198.81996267,
 -198.81964781, -198.81935068, -198.81907216, -198.81881307, -198.81857416,
 -198.81835608, -198.81815944, -198.81798475, -198.81783246, -198.81770297,
 -198.81759659, -198.81751359, -198.81745416, -198.81741845, -198.81740654,
 -198.81741845, -198.81745416, -198.81751359, -198.81759659, -198.81770297,
 -198.81783246, -198.81798475, -198.81815944, -198.81835608, -198.81857416,
 -198.81881307, -198.81907216, -198.81935068, -198.81964781, -198.81996267,
 -198.82029426, -198.82064153, -198.82100328, -198.82137826, -198.82176508,
 -198.82216224, -198.82256811, -198.82298094, -198.82339886, -198.82381981,
 -198.82424162, -198.82466195, -198.82507825, -198.82548781, -198.82588768,
 -198.82627472, -198.82664551, -198.82699641, -198.82732347, -198.82762248,
 -198.82788892, -198.82811794, -198.82830434, -198.82844255, -198.82852657,
 -198.82854996, -198.82850581, -198.82838669, -198.82818462, -198.82789106,
 -198.82749687, -198.82699222, -198.8263666, -198.82560872, -198.82470645])

e_2lastv0 = numpy.array([-198.82560840, -198.82636641, -198.82699222, -198.82749613, -198.82788675,
    -198.82817177, -198.82835830, -198.82845303, -198.82846250, -198.82839313,
    -198.82825135, -198.82804360, -198.82777641, -198.82745631, -198.82708987,
    -198.82668364, -198.82624406, -198.82577745, -198.82528990, -198.82478721,
    -198.82427486, -198.82375794, -198.82324112, -198.82272866, -198.82222438,
    -198.82173171, -198.82125370, -198.82079306, -198.82035220, -198.81993330,
    -198.81953830, -198.81916904, -198.81882717, -198.81851437, -198.81823211,
    -198.81798193, -198.81776510, -198.81758281, -198.81743604, -198.81732457,
    -198.81724802, -198.81720490, -198.81719211, -198.81720498, -198.81723499,
    -198.81728100, -198.81732765, -198.81736866, -198.81739662, -198.81740654,
    -198.81739662, -198.81736866, -198.81732765, -198.81728100, -198.81723499,
    -198.81720498, -198.81719211, -198.81720490, -198.81724802, -198.81732457,
    -198.81743604, -198.81758281, -198.81776510, -198.81798193, -198.81823211,
    -198.81851437, -198.81882717, -198.81916904, -198.81953830, -198.81993330,
    -198.82035220, -198.82079306, -198.82125370, -198.82173171, -198.82222438,
    -198.82272866, -198.82324112, -198.82375794, -198.82427486, -198.82478721,
    -198.82528990, -198.82577745, -198.82624406, -198.82668364, -198.82708987,
    -198.82745631, -198.82777641, -198.82804360, -198.82825135, -198.82839313,
    -198.82846250, -198.82845303, -198.82835830, -198.82817177, -198.82788675,
    -198.82749687, -198.82699222, -198.82636634, -198.82560852, -198.82470634])

e_lastv0 =  numpy.array([-198.82560767, -198.82636628, -198.82699222, -198.82749568, -198.8278678,
 -198.82820985, -198.82843645, -198.82843372, -198.82843747, -198.82835763,
 -198.8287233, -198.82799057, -198.82771035, -198.82737045, -198.82835281,
 -198.82643806, -198.82800724, -198.82274308, -198.82762895, -198.82731379,
 -198.8234051 , -198.81859861, -198.82184121, -198.82107748, -198.81555791,
 -198.81503957, -198.82511084, -198.81945252, -198.81896113, -198.81382419,
 -198.8138819, -198.81854855, -198.81830737, -198.82229528, -198.81435677,
 -198.81795769, -198.81769753, -198.81770195, -198.8178687, -198.81992204,
 -198.81975621, -198.81751169, -198.81878988, -198.81862859, -198.81654511,
 -198.81789646, -198.8172513, -198.8175152, -198.81741796, -198.81738382,
 -198.81741837, -198.81743319, -198.8176666, -198.81748459, -198.81803155,
 -198.81763037, -198.8177241, -198.81762852, -198.81615386, -198.81801012,
 -198.82031472, -198.81800223, -198.82119427, -198.81784144, -198.81348818,
 -198.81773417, -198.82268762, -198.8181185, -198.8183391, -198.81339229,
 -198.81360065, -198.8189729, -198.81950468, -198.81984785, -198.81512372,
 -198.82095796, -198.8263512, -198.81831339, -198.81903115, -198.8196988,
 -198.82087967, -198.82501024, -198.82571128, -198.82632706, -198.82528579,
 -198.82721666, -198.82755917, -198.82707659, -198.82812514, -198.82787054,
 -198.82868583, -198.82840865, -198.82822173, -198.82821023, -198.82785237,
 -198.82749687, -198.82699092, -198.82636641, -198.82560876, -198.82470635])


e_lastv1 =  numpy.array([-198.64228157, -198.73268325, -198.79564484, -198.81116662, -198.81795913,
 -198.82166372, -198.82393000, -198.82540309, -198.82638353, -198.82702923,
 -198.82743195, -198.82764901, -198.82771906, -198.82766970, -198.82752185,
 -198.82729212, -198.82699423, -198.82663991, -198.82623936, -198.82580160,
 -198.82533464, -198.82484559, -198.82434078, -198.82382575, -198.82330532,
 -198.82278365, -198.82226417, -198.82174971, -198.82124244, -198.82074388,
 -198.82025491, -198.81977570, -198.81930564, -198.81884323, -198.81838579,
 -198.81792918, -198.81746711, -198.81699024, -198.81648484, -198.81592831,
 -198.81528603, -198.81449985, -198.81346625, -198.81198627, -198.80963942,
 -198.80538001, -198.79600992, -198.76631305, -198.75157448, -198.81740424,
 -198.78392564, -198.76630731, -198.79600844, -198.80537938, -198.80963909,
 -198.81198606, -198.81346611, -198.81449975, -198.81528595, -198.81592825,
 -198.81648479, -198.81699020, -198.81746708, -198.81792915, -198.81838577,
 -198.81884321, -198.81930563, -198.81977568, -198.82025490, -198.82074387,
 -198.82124243, -198.82174971, -198.82226417, -198.82278364, -198.82330532,
 -198.82382574, -198.82434078, -198.82484559, -198.82533464, -198.82580161,
 -198.82623937, -198.82663991, -198.82699423, -198.82729212, -198.82752185,
 -198.82766970, -198.82771905, -198.82764901, -198.82743193, -198.82702921,
 -198.82638351, -198.82540307, -198.82392998, -198.82166369, -198.81795911,
 -198.82749687, -198.79564493, -198.73225488, -198.63772683, -198.82470345])


y_full = numpy.concatenate([e_bo[1:10], e_lastv0[10:90], e_bo[90:99]])

mask = ((HF_distance[1:99] >= 1.0) & (HF_distance[1:99] <= 1.15)) | ((HF_distance[1:99] >= 1.3) & (HF_distance[1:99] <= 1.5)) | ((HF_distance[1:99] >= 1.8) & (HF_distance[1:99] <= 1.9))

x_smoothv0 = HF_distance[1:99][mask]
y_smoothv0 = y_full[mask]

coeffsv0 = numpy.polyfit(x_smoothv0, y_smoothv0, deg=4)
polyv0 = numpy.poly1d(coeffsv0)

y_hybridv0 = e_lastv0[1:99].copy()
y_hybridv0 = polyv0(HF_distance[1:99])




e_lastv1[e_lastv1 > -198.80] = -198.80

mask = ((HF_distance[4:97] >= 1.1) & (HF_distance[4:97] <= 1.25)) | ((HF_distance[4:97] >= 1.6) & (HF_distance[4:97] <= 1.8))
replace_mask = (HF_distance[4:97] >= 1.2) & (HF_distance[4:97] <= 1.6)

x_smoothv1 = HF_distance[4:97][mask]
y_smoothv1 = e_lastv1[4:97][mask]

coeffsv1 = numpy.polyfit(x_smoothv1, y_smoothv1, deg=4)
polyv1 = numpy.poly1d(coeffsv1)

y_hybridv1 = e_lastv1[4:97].copy()
y_hybridv1[replace_mask] = polyv1(HF_distance[4:97][replace_mask])


'''
plt.plot(HF_distance[1:99], e_bo[1:99], 'go', HF_distance[1:99], e_bo[1:99], 'g--', label='BO', color='Black')
plt.plot(HF_distance[1:99], e_lastv0[1:99], 'go', HF_distance[1:99], e_lastv0[1:99], 'g--', label='it_last', color='Red')
plt.plot(HF_distance[1:99], y_hybridv0, 'b-', label='Fitted')
#plt.title('FHF v = 0 (2.60 a.u.) energy for UKS w/o microiterations')
plt.legend()
#plt.xlim((1.1, 1.5))
#plt.ylim((-198.85, -198.846))
plt.ylabel('Energy / au')
plt.xlabel('FH-Distance / a.u.')
plt.savefig('v0_energy290.png')
'''




plt.plot(HF_distance[4:97], e_bo[4:97], 'go', HF_distance[4:97], e_bo[4:97], 'g--', label='BO', color='Black')
plt.plot(HF_distance[4:97], e_lastv1[4:97], 'go', HF_distance[4:97], e_lastv1[4:97], 'g--', label='it_last', color='Red')
plt.plot(HF_distance[4:97], y_hybridv1, 'b-', label='Fitted')
#plt.title('FHF v = 0 (2.60 a.u.) energy for UKS w/o microiterations')
plt.legend()
#plt.xlim((1.1, 1.6))
#plt.ylim((-198.9, -198.2))
plt.ylabel('Energy / au')
plt.xlabel('FH-Distance / a.u.')
plt.savefig('v1_energy290.png')


'''
# V0 for F-F = 290:
bo_barrier = max(e_bo[40: 60]) - min(e_bo)
dft_barrier = e_lastv0[numpy.argmax(e_bo)] - e_lastv0[numpy.argmin(e_bo)]

print('v = 0')
print('BO Barrier:', bo_barrier)
print('NECSCF Barrier:', dft_barrier)
print('NECSCF correction:', dft_barrier - bo_barrier)
print('Correction %:', ((dft_barrier - bo_barrier) / bo_barrier)*100)

# v = 0
#BO barrier = 0.01114341999999624
#NECSCF-DFT barrier = 0.01105365000000802
#NECSCF correction: - 8.976999998822066e-05
# Correction %: -0.8055875125253374
'''


# V1 for F-F = 290:
bo_barrier = max(e_bo[40: 60]) - min(e_bo)
dft_barrier = max(y_hybridv1[40: 60]) - min(e_lastv0)
print('v = 1')
print('BO Barrier:', bo_barrier)
print('NECSCF Barrier:', dft_barrier)
print('NECSCF correction:', 0.013122283028108495 - bo_barrier)
print('Correction %:', ((0.013122283028108495- bo_barrier) / bo_barrier)*100)

# v = 1
#BO barrier = 0.01114341999999624
#NECSCF-DFT barrier = 0.013122283028108495
#NECSCF correction: +0.0019788630281122547
# Correction %: +17.758130162130854
