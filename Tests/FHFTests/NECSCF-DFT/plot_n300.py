import matplotlib.pyplot as plt
import numpy
from pyscf import gto
from NECSCF.Nuclear import geom
from numpy import sin, pi, sqrt
import copy


mol=gto.Mole()
mol.atom = [['F',(0, 0, -1.5)],
            ['H',(0, 0, -0.0)],
            ['F',(0, 0, 1.5)]]
mol.basis = 'def2-SVP'
mol.charge = -1
mol.spin = 0
mol.build()

N = 100
NQ = 50
Q = geom.switch_geom(mol)
step = 0.01*1.88972612
v = 0
DisVector = numpy.array([[0.00000, 0.00000, -0.00000],
                      [0.00000, 0.00000,  1.00000],
                      [0.00000, 0.00000,  0.00000]])

Geom_k = numpy.array(geom.geom_gen(Q, DisVector, N, NQ, step/1.88972612))
HF_distance = Geom_k[:, 1, 2] + 1.5


nuc_wfn_1v0 =  numpy.array([1.41604801+0.j, 1.40680338+0.j, 1.39116129+0.j, 1.36917503+0.j,
 1.34105448+0.j, 1.30716059+0.j, 1.26796994+0.j, 1.22405826+0.j,
 1.1760679 +0.j, 1.12468952+0.j, 1.07063327+0.j, 1.01461305+0.j,
 0.95732297+0.j, 0.89942651+0.j, 0.84153917+0.j, 0.78422336+0.j,
 0.72797727+0.j, 0.67323513+0.j, 0.62036141+0.j, 0.56965551+0.j,
 0.52134995+0.j, 0.47561807+0.j, 0.4325748 +0.j, 0.39228609+0.j,
 0.35477089+0.j, 0.32001119+0.j, 0.28795417+0.j, 0.25852202+0.j,
 0.23161362+0.j, 0.20711351+0.j, 0.18489276+0.j, 0.16481684+0.j,
 0.1467455 +0.j, 0.13053956+0.j, 0.11605972+0.j, 0.10317248+0.j,
 0.09174799+0.j, 0.08166516+0.j, 0.07280888+0.j, 0.06507447+0.j,
 0.05836441+0.j, 0.05259236+0.j, 0.04767958+0.j, 0.04355869+0.j,
 0.04016987+0.j, 0.03746453+0.j, 0.03540145+0.j, 0.03395039+0.j,
 0.03308823+0.j, 0.03280262+0.j, 0.03308823+0.j, 0.03395039+0.j,
 0.03540145+0.j, 0.03746453+0.j, 0.04016987+0.j, 0.04355869+0.j,
 0.04767958+0.j, 0.05259236+0.j, 0.05836441+0.j, 0.06507447+0.j,
 0.07280888+0.j, 0.08166516+0.j, 0.09174799+0.j, 0.10317248+0.j,
 0.11605972+0.j, 0.13053956+0.j, 0.1467455 +0.j, 0.16481684+0.j,
 0.18489276+0.j, 0.20711351+0.j, 0.23161362+0.j, 0.25852202+0.j,
 0.28795417+0.j, 0.32001119+0.j, 0.35477089+0.j, 0.39228609+0.j,
 0.4325748 +0.j, 0.47561807+0.j, 0.52134995+0.j, 0.56965551+0.j,
 0.62036141+0.j, 0.67323513+0.j, 0.72797727+0.j, 0.78422336+0.j,
 0.84153917+0.j, 0.89942651+0.j, 0.95732297+0.j, 1.01461305+0.j,
 1.07063327+0.j, 1.12468952+0.j, 1.1760679 +0.j, 1.22405826+0.j,
 1.26796994+0.j, 1.30716059+0.j, 1.34105448+0.j, 1.36917503+0.j,
 1.39116129+0.j, 1.40680338+0.j, 1.41604801+0.j, 1.41904972+0.j])


nuc_wfn_2v0 =  numpy.array([-1.41604802-1.47911918e-21j, -1.40680339+5.95154859e-05j,
 -1.39116129+1.00986999e-04j, -1.36917503+1.50752616e-04j,
 -1.34105448+1.91139416e-04j, -1.30716057+2.33710009e-04j,
 -1.26796991+2.68826704e-04j, -1.22405823+3.03180291e-04j,
 -1.17606786+3.30844179e-04j, -1.12468946+3.56101156e-04j,
 -1.0706332 +3.75247902e-04j, -1.01461297+3.91164437e-04j,
 -0.95732289+4.01646030e-04j, -0.89942642+4.08659166e-04j,
 -0.84153907+4.11065538e-04j, -0.78422325+4.10175225e-04j,
 -0.72797716+4.05624108e-04j, -0.67323501+3.98207127e-04j,
 -0.62036128+3.88123196e-04j, -0.56965538+3.75734438e-04j,
 -0.52134982+3.61646771e-04j, -0.47561794+3.45843185e-04j,
 -0.43257467+3.29222063e-04j, -0.39228596+3.11428536e-04j,
 -0.35477076+2.93571368e-04j, -0.32001106+2.74994748e-04j,
 -0.28795404+2.56960963e-04j, -0.2585219 +2.38549112e-04j,
 -0.2316135 +2.21137099e-04j, -0.2071134 +2.03574346e-04j,
 -0.18489265+1.87329964e-04j, -0.16481674+1.71058063e-04j,
 -0.1467454 +1.56303523e-04j, -0.13053947+1.41557484e-04j,
 -0.11605964+1.28430580e-04j, -0.1031724 +1.15280450e-04j,
 -0.09174791+1.03776330e-04j, -0.08166509+9.21684182e-05j,
 -0.07280881+8.21785378e-05j, -0.0650744 +7.19719579e-05j,
 -0.05836434+6.33171541e-05j, -0.0525923 +5.43135798e-05j,
 -0.04767952+4.67699695e-05j, -0.04355863+3.87360465e-05j,
 -0.04016981+3.20537414e-05j, -0.03746448+2.47366136e-05j,
 -0.0354014 +1.86520634e-05j, -0.03395034+1.17891041e-05j,
 -0.03308818+6.03234381e-06j, -0.03280258-6.43490036e-07j,
 -0.03308818-6.34518929e-06j, -0.03395034-1.31028224e-05j,
 -0.0354014 -1.90233190e-05j, -0.03746448-2.61322443e-05j,
 -0.04016981-3.25453070e-05j, -0.04355863-4.02738841e-05j,
 -0.04767952-4.74507799e-05j, -0.0525923 -5.60625323e-05j,
 -0.05836434-6.42668145e-05j, -0.0650744 -7.40131209e-05j,
 -0.07280881-8.34910396e-05j, -0.08166508-9.45986843e-05j,
 -0.09174791-1.05563771e-04j, -0.1031724 -1.18216025e-04j,
 -0.11605963-1.30826717e-04j, -0.13053946-1.45137077e-04j,
 -0.1467454 -1.59466870e-04j, -0.16481674-1.75445373e-04j,
 -0.18489265-1.91446013e-04j, -0.2071134 -2.08959338e-04j,
 -0.2316135 -2.26419092e-04j, -0.25852189-2.45147414e-04j,
 -0.28795404-2.63648520e-04j, -0.32001105-2.83044375e-04j,
 -0.35477076-3.01926205e-04j, -0.39228595-3.21183111e-04j,
 -0.43257466-3.39520056e-04j, -0.47561793-3.57560863e-04j,
 -0.52134981-3.74165824e-04j, -0.56965537-3.89661984e-04j,
 -0.62036127-4.03126775e-04j, -0.673235  -4.14558980e-04j,
 -0.72797715-4.23341009e-04j, -0.78422324-4.29107980e-04j,
 -0.84153906-4.31667502e-04j, -0.8994264 -4.30242540e-04j,
 -0.95732288-4.25226239e-04j, -1.01461296-4.15350171e-04j,
 -1.07063319-4.01805540e-04j, -1.12468945-3.82690631e-04j,
 -1.17606785-3.60283855e-04j, -1.22405822-3.31787489e-04j,
 -1.2679699 -3.00990788e-04j, -1.30716056-2.63699781e-04j,
 -1.34105447-2.25925314e-04j, -1.36917503-1.81056455e-04j,
 -1.39116129-1.38795276e-04j, -1.40680338-8.76329028e-05j,
 -1.41604802-4.52653841e-05j, -1.41904973+1.46270393e-05j])



nuc_wfn_norm1v0 = (nuc_wfn_1v0) / numpy.sum(nuc_wfn_1v0)
nuc_wfn_norm2v0 = (nuc_wfn_2v0) / numpy.sum(nuc_wfn_2v0)
nuc_density_norm1v0 = (nuc_wfn_1v0)**2 / numpy.sum((nuc_wfn_1v0)**2)
nuc_density_norm2v0 = (nuc_wfn_2v0)**2 / numpy.sum((nuc_wfn_2v0)**2)


'''
plt.plot(HF_distance, nuc_wfn_norm1v0, 'go', HF_distance, nuc_wfn_norm1v0, 'g--', label='v0 wfn 1', color='darkred')
plt.plot(HF_distance, nuc_density_norm1v0, 'go', HF_distance, nuc_density_norm1v0, 'g--', label='v0 density 1', color='darkblue')
plt.plot(HF_distance, nuc_wfn_norm2v0, 'go', HF_distance, nuc_wfn_norm2v0, 'g--', label='v0 wfn 1', color='yellow')
plt.plot(HF_distance, nuc_density_norm2v0, 'go', HF_distance, nuc_density_norm2v0, 'g--', label='v0 density 1', color='orange')

#plt.title('FHF v = 0 (2.60 a.u.) energy for UKS w/o microiterations')
plt.legend()
#plt.xlim((1.1, 1.7))
#plt.ylim((-198.84, -198.82))
plt.ylabel('Nuclear Density / au')
plt.xlabel('FH-Distance / a.u.')
plt.savefig('v0_nucdata300.png')
'''

def firstgrad(L, N):
    n = (N - 1)/2
    T = numpy.zeros((N, N))
    for i in range(N):
        for j in range(N):
            if (i==j):
                T[i][j] = 0.
            else:
                T[i][j] = -(2.*pi/(L*N))*((sin((n+1)*(i-j)*2.*pi/N)/2./sin((i-j)*pi/N)**2) + \
                             ((-1)**(i-j+1)*(n+1)/(sin((i-j)*pi/N))))
    return T


def grad(f, L, N):
    delta_x = L/N
    grad = numpy.zeros(len(f), dtype='complex256')
    for i in range(4, len(f)-5):
        grad[i] = (3*f[i-4]-32*f[i-3]+168*f[i-2]-672*f[i-1]+0*f[i+0]+672*f[i+1]-168*f[i+2]+32*f[i+3]-3*f[i+4])/(840.*delta_x)
    #Left and right formulas for terminal points
    grad[0] = (f[1] - f[0])/delta_x
    grad[len(f)-1] = (f[len(f)-1] - f[len(f)-2])/delta_x
    #Two point formula applies
    grad[1] = (f[2] - f[0])/(2.*delta_x)
    grad[len(f)-2] = (f[len(f)-1] - f[len(f)-3])/(2.*delta_x)
    #Four point formula applies
    grad[2] = (-f[4] + 8.*f[3] - 8.*f[1] + f[0])/(12.*delta_x)
    grad[3] = (-f[5] + 8.*f[4] - 8.*f[2] + f[1])/(12.*delta_x)
    grad[len(f)-3] = (-f[len(f)-1] + 8.*f[len(f)-2] - 8.*f[len(f)-4] + f[len(f)-5])/(12.*delta_x)
    grad[len(f)-4] = (-f[len(f)-2] + 8.*f[len(f)-3] - 8.*f[len(f)-5] + f[len(f)-6])/(12.*delta_x)
    return grad

def normalization(vector, L, N):
    delta_x = L/N
    c = 1./(delta_x * sum(vector.conj()*vector))
    return sqrt(c) * vector

def anagrad(CR, T):
    grad = T.dot(CR)
    return grad

vector_n = normalization(nuc_wfn_2v0, step*N, N)
NUC_TERM = anagrad(vector_n, firstgrad(step*N, N)) / vector_n
NUC_TERM1 = grad(vector_n, step*N, N) /  vector_n

NUC_TERM_NEW = copy.copy(NUC_TERM)
for i in range(N // 2 - 1):
  NUC_TERM_NEW[2*i + 1] = (NUC_TERM[2*i] + NUC_TERM[2*i + 2]) / 2
  NUC_TERM_NEW[-1] = abs(NUC_TERM_NEW[-1])


plt.plot(HF_distance, NUC_TERM, 'go', HF_distance, NUC_TERM, 'g--', label='v0 wfn 1', color='darkred')
plt.plot(HF_distance, NUC_TERM_NEW, 'go', HF_distance, NUC_TERM_NEW, 'g--', label='nuc_grad', color='darkblue')
plt.savefig('v0_nucterm300.png')

print(NUC_TERM_NEW.real)