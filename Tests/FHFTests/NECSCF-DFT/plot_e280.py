import matplotlib.pyplot as plt
import numpy
from pyscf import gto
from NECSCF.Nuclear import geom


mol=gto.Mole()
mol.atom = [['F',(0, 0, -1.4)],
            ['H',(0, 0, -0.0)],
            ['F',(0, 0, 1.4)]]
mol.basis = 'def2-SVP'
mol.charge = -1
mol.spin = 0
mol.build()

N = 120
NQ = 60
Q = geom.switch_geom(mol)
step = 0.01*1.88972612
v = 0
DisVector = numpy.array([[0.00000, 0.00000, -0.00000],
                      [0.00000, 0.00000,  1.00000],
                      [0.00000, 0.00000,  0.00000]])

Geom_k = numpy.array(geom.geom_gen(Q, DisVector, N, NQ, step/1.88972612))
HF_distance = Geom_k[:, 1, 2] + 1.4



e_bo =  numpy.array([-198.79163988, -198.7965362,  -198.80099329, -198.80504315, -198.80871564,
 -198.81203866, -198.81503823, -198.81773861, -198.82016242, -198.82233075,
 -198.82426326, -198.82597833, -198.82749310, -198.82882357, -198.82998469,
 -198.83099039, -198.83185363, -198.83258650, -198.83320026, -198.83370537,
 -198.83411162, -198.83442810, -198.83466332, -198.83482520, -198.83492110,
 -198.83495789, -198.83494192, -198.83487913, -198.83477502, -198.83463470,
 -198.83446294, -198.83426419, -198.83404257, -198.83380193, -198.83354586,
 -198.83327768, -198.83300047, -198.83271710, -198.83243021, -198.83214228,
 -198.83185557, -198.83157220, -198.83129413, -198.83102316, -198.83076096,
 -198.83050907, -198.83026889, -198.83004169, -198.82982862, -198.82963073,
 -198.82944896, -198.82928414, -198.82913700, -198.82900818, -198.82889824,
 -198.82880766, -198.82873681, -198.82868599, -198.82865541, -198.82864520,
 -198.82865541, -198.82868599, -198.82873681, -198.82880766, -198.82889824,
 -198.82900818, -198.82913700, -198.82928414, -198.82944896, -198.82963073,
 -198.82982862, -198.83004169, -198.83026889, -198.83050907, -198.83076096,
 -198.83102316, -198.83129413, -198.83157220, -198.83185557, -198.83214228,
 -198.83243021, -198.83271710, -198.83300047, -198.83327768, -198.83354586,
 -198.83380193, -198.83404257, -198.83426419, -198.83446294, -198.83463470,
 -198.83477502, -198.83487913, -198.83494192, -198.83495789, -198.83492110,
 -198.83482520, -198.83466332, -198.83442810, -198.83411162, -198.83370537,
 -198.83320026, -198.83258650, -198.83185363, -198.83099039, -198.82998469,
 -198.82882357, -198.82749310, -198.82597833, -198.82426326, -198.82233075,
 -198.82016242, -198.81773861, -198.81503823, -198.81203866, -198.80871564,
 -198.80504315, -198.80099329, -198.79653620, -198.79163988, -198.78627006])

e_lastv0 =  numpy.array([-198.00119874, -198.79411371, -198.79060934, -198.80448832, -198.81162923,
 -198.81008161, -198.80804190, -198.81661115, -198.81515357, -198.82132619,
 -198.82536676, -198.82385048, -198.82835586, -198.82818564, -198.82798656,
 -198.82966201, -198.83038985, -198.83223877, -198.83285390, -198.83345057,
 -198.83387272, -198.83453267, -198.83425193, -198.83458942, -198.83484640,
 -198.83498269, -198.83497486, -198.83488493, -198.83474303, -198.83463248,
 -198.83446373, -198.83426367, -198.83404127, -198.83377867, -198.83353751,
 -198.83325942, -198.83298080, -198.83262268, -198.83240215, -198.83210223,
 -198.83188800, -198.83161892, -198.83124921, -198.83097453, -198.83071178,
 -198.83045147, -198.83022778, -198.82999173, -198.82979127, -198.82967561,
 -198.82936632, -198.82931624, -198.82911771, -198.82898825, -198.82888887,
 -198.82877595, -198.82873351, -198.82869029, -198.82865527, -198.82864514,
 -198.82865417, -198.82868456, -198.82873108, -198.82881164, -198.82888438,
 -198.82899331, -198.82911389, -198.82926127, -198.82941188, -198.82965705,
 -198.82968693, -198.83007452, -198.83011078, -198.83038289, -198.83081866,
 -198.83089194, -198.83124062, -198.83153231, -198.83181027, -198.83210604,
 -198.83246941, -198.83273655, -198.83297465, -198.83326392, -198.83356128,
 -198.83378973, -198.83404775, -198.83426416, -198.83446283, -198.83463042,
 -198.83477659, -198.83489712, -198.83491528, -198.83490252, -198.83475198,
 -198.83451662, -198.83474552, -198.83458627, -198.83391583, -198.83286707,
 -198.83238210, -198.83138844, -198.83142470, -198.83040252, -198.82939948,
 -198.82656790, -198.82554142, -198.82496941, -198.82332002, -198.82094068,
 -198.82058413, -198.81588860, -198.81528421, -198.80444701, -198.80774738,
 -198.79288591, -198.80007944, -198.80344950, -198.79891185, -198.00930036])


e_lastv1 =  numpy.array([-198.03210867, -198.76680495, -198.79138949, -198.80092102, -198.81155283,
 -198.80955412, -198.81277793, -198.81907874, -198.81849958, -198.81870073,
 -198.82308072, -198.82499183, -198.82819778, -198.82679482, -198.82816363,
 -198.83141102, -198.83058542, -198.83156585, -198.83235481, -198.83390387,
 -198.83357831, -198.83403595, -198.83455770, -198.83475133, -198.83478759,
 -198.83493016, -198.83492760, -198.83487454, -198.83477540, -198.83463409,
 -198.83446646, -198.83425167, -198.83402141, -198.83376637, -198.83349344,
 -198.83320642, -198.83287888, -198.83260752, -198.83230752, -198.83169833,
 -198.83199354, -198.83174922, -198.83104734, -198.83074294, -198.83045288,
 -198.83015308, -198.83058568, -198.82959401, -198.82927558, -198.82783951,
 -198.82873613, -198.82650687, -198.82581438, -198.82435885, -198.83076313,
 -198.82522637, -198.82192304, -198.81381803, -198.75618038, -198.05276040,
 -198.75566232, -198.83807665, -198.82243740, -198.82524330, -198.82661612,
 -198.82447702, -198.82580583, -198.82822039, -198.82867935, -198.82902280,
 -198.82931314, -198.83044672, -198.82987121, -198.83014989, -198.82987609,
 -198.83125488, -198.83105535, -198.83097680, -198.83167492, -198.83198064,
 -198.83206820, -198.83240337, -198.83290775, -198.83333380, -198.83340537,
 -198.83376485, -198.83398101, -198.83423001, -198.83446643, -198.83463410,
 -198.83477444, -198.83488250, -198.83495299, -198.83492991, -198.83487423,
 -198.83488515, -198.83455657, -198.83428188, -198.83426903, -198.83303471,
 -198.83288342, -198.83221536, -198.83223404, -198.82951358, -198.82818850,
 -198.82809568, -198.82661441, -198.82330107, -198.82309570, -198.82113226,
 -198.81571743, -198.81605446, -198.80859162, -198.80964855, -198.80505406,
 -198.80095284, -198.79157709, -198.80264180, -198.05742474, -198.05648493])


plt.plot(HF_distance[20:100], e_bo[20:100], 'go', HF_distance[20:100], e_bo[20:100], 'g--', label='BO', color='Black')
plt.plot(HF_distance[20:100], e_lastv0[20:100], 'go', HF_distance[20:100], e_lastv0[20:100], 'g--', label='it_last', color='Red')
#plt.title('FHF v = 0 (2.60 a.u.) energy for UKS w/o microiterations')
plt.legend()
#plt.xlim((1.1, 1.7))
#plt.ylim((-198.84, -198.82))
plt.ylabel('Energy / au')
plt.xlabel('FH-Distance / a.u.')
plt.savefig('v0_energy280.png')



# Fixing discontinuities

e_lastv1[57:62] = -198.82522637

mask = ((HF_distance[20:101] >= 1.0) & (HF_distance[20:101] <= 1.25)) | ((HF_distance[20:101] >= 1.55) & (HF_distance[20:101] <= 1.8))
replace_mask = (HF_distance[20:101] >= 1.25) & (HF_distance[20:101] <= 1.55)

x_smooth = HF_distance[20:101][mask]
y_smooth = e_lastv1[20:101][mask]

coeffs = numpy.polyfit(x_smooth, y_smooth, deg=4)
poly = numpy.poly1d(coeffs)

y_hybrid = e_lastv1[20:101].copy()
y_hybrid[replace_mask] = poly(HF_distance[20:101][replace_mask])

'''
plt.plot(HF_distance[20:101], e_lastv1[20:101], 'gray', alpha=0.5, label='Original Data')
plt.plot(x_smooth, y_smooth, 'bo', label='Smooth Data Points')
plt.plot(HF_distance[20:101], y_hybrid, 'r-', label='Fitted Smooth Curve', linewidth=2)
plt.legend()
plt.xlabel('x')
plt.ylabel('y')
plt.title('Smooth Curve Fit from Selected Regions')
plt.savefig('v1_energy280.png')
'''


e_lastv1[57:62] = -198.82522637

plt.plot(HF_distance[20:101], e_bo[20:101], 'go', HF_distance[20:101], e_bo[20:101], 'g--', label='BO', color='Black')
plt.plot(HF_distance[20:101], e_lastv1[20:101], 'go', HF_distance[20:101], e_lastv1[20:101], 'g--', label='it_last', color='Red')
plt.plot(HF_distance[20:101], y_hybrid, 'r-', label='Fitted Smooth Curve', linewidth=2)
#plt.title('FHF v = 0 (2.60 a.u.) energy for UKS w/o microiterations')
plt.legend()
#plt.xlim((1.1, 1.7))
#plt.ylim((-198.84, -198.82))
plt.ylabel('Energy / au')
plt.xlabel('FH-Distance / a.u.')
plt.savefig('v1_energy280.png')





# V0 for F-F = 280:
bo_barrier = max(e_bo[40: 70]) - min(e_bo)
dft_barrier = max(e_bo[40: 70]) - min(e_lastv0[60:])

print('BO Barrier:', bo_barrier)
print('NECSCF Barrier:', dft_barrier)
print('NECSCF correction:', dft_barrier - bo_barrier)
print('Correction %:', ((dft_barrier - bo_barrier) / bo_barrier)*100)

#BO barrier = 0.006312689999987242
#NECSCF-DFT barrier = 0.0062700799999788615
#NECSCF correction: -4.2610000008380666e-05
# Correction %: -0.6749895846060361



bo_barrier = max(e_bo[30: 90]) - min(e_bo)
DFT_barrier = numpy.max(y_hybrid[30:70]) - e_lastv1[numpy.argmin(e_bo)]
print('V1 Energy barrier:', bo_barrier)
print('NECSCF Barrier:', DFT_barrier)
print('NECSCF correction:', DFT_barrier - bo_barrier)
print('Correction %:', ((DFT_barrier - bo_barrier) / bo_barrier)*100)

# BO barrier = 0.006312689999987242
# V1 Energy barrier: 0.007097667073225011
#NECSCF correction: 0.0007849770732377692
# NECSCF correction: +12.4349
