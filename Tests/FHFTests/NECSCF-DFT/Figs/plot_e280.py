import matplotlib.pyplot as plt
import numpy
from pyscf import gto
from NECSCF.Nuclear import geom
from matplotlib import rc


mol=gto.Mole()
mol.atom = [['F',(0, 0, -1.4)],
            ['H',(0, 0, -0.0)],
            ['F',(0, 0, 1.4)]]
mol.basis = 'def2-SVP'
mol.charge = -1
mol.spin = 0
mol.build()

N = 120
NQ = 60
Q = geom.switch_geom(mol)
step = 0.01*1.88972612
v = 0
DisVector = numpy.array([[0.00000, 0.00000, -0.00000],
                      [0.00000, 0.00000,  1.00000],
                      [0.00000, 0.00000,  0.00000]])

Geom_k = numpy.array(geom.geom_gen(Q, DisVector, N, NQ, step/1.88972612))
HF_distance = Geom_k[:, 1, 2] + 1.4



e_bo =  numpy.array([-198.79163988, -198.7965362,  -198.80099329, -198.80504315, -198.80871564,
 -198.81203866, -198.81503823, -198.81773861, -198.82016242, -198.82233075,
 -198.82426326, -198.82597833, -198.82749310, -198.82882357, -198.82998469,
 -198.83099039, -198.83185363, -198.83258650, -198.83320026, -198.83370537,
 -198.83411162, -198.83442810, -198.83466332, -198.83482520, -198.83492110,
 -198.83495789, -198.83494192, -198.83487913, -198.83477502, -198.83463470,
 -198.83446294, -198.83426419, -198.83404257, -198.83380193, -198.83354586,
 -198.83327768, -198.83300047, -198.83271710, -198.83243021, -198.83214228,
 -198.83185557, -198.83157220, -198.83129413, -198.83102316, -198.83076096,
 -198.83050907, -198.83026889, -198.83004169, -198.82982862, -198.82963073,
 -198.82944896, -198.82928414, -198.82913700, -198.82900818, -198.82889824,
 -198.82880766, -198.82873681, -198.82868599, -198.82865541, -198.82864520,
 -198.82865541, -198.82868599, -198.82873681, -198.82880766, -198.82889824,
 -198.82900818, -198.82913700, -198.82928414, -198.82944896, -198.82963073,
 -198.82982862, -198.83004169, -198.83026889, -198.83050907, -198.83076096,
 -198.83102316, -198.83129413, -198.83157220, -198.83185557, -198.83214228,
 -198.83243021, -198.83271710, -198.83300047, -198.83327768, -198.83354586,
 -198.83380193, -198.83404257, -198.83426419, -198.83446294, -198.83463470,
 -198.83477502, -198.83487913, -198.83494192, -198.83495789, -198.83492110,
 -198.83482520, -198.83466332, -198.83442810, -198.83411162, -198.83370537,
 -198.83320026, -198.83258650, -198.83185363, -198.83099039, -198.82998469,
 -198.82882357, -198.82749310, -198.82597833, -198.82426326, -198.82233075,
 -198.82016242, -198.81773861, -198.81503823, -198.81203866, -198.80871564,
 -198.80504315, -198.80099329, -198.79653620, -198.79163988, -198.78627006])

e_lastv0 =  numpy.array([-198.00119874, -198.79411371, -198.79060934, -198.80448832, -198.81162923,
 -198.81008161, -198.80804190, -198.81661115, -198.81515357, -198.82132619,
 -198.82536676, -198.82385048, -198.82835586, -198.82818564, -198.82798656,
 -198.82966201, -198.83038985, -198.83223877, -198.83285390, -198.83345057,
 -198.83387272, -198.83453267, -198.83425193, -198.83458942, -198.83484640,
 -198.83498269, -198.83497486, -198.83488493, -198.83474303, -198.83463248,
 -198.83446373, -198.83426367, -198.83404127, -198.83377867, -198.83353751,
 -198.83325942, -198.83298080, -198.83262268, -198.83240215, -198.83210223,
 -198.83188800, -198.83161892, -198.83124921, -198.83097453, -198.83071178,
 -198.83045147, -198.83022778, -198.82999173, -198.82979127, -198.82967561,
 -198.82936632, -198.82931624, -198.82911771, -198.82898825, -198.82888887,
 -198.82877595, -198.82873351, -198.82869029, -198.82865527, -198.82864514,
 -198.82865417, -198.82868456, -198.82873108, -198.82881164, -198.82888438,
 -198.82899331, -198.82911389, -198.82926127, -198.82941188, -198.82965705,
 -198.82968693, -198.83007452, -198.83011078, -198.83038289, -198.83081866,
 -198.83089194, -198.83124062, -198.83153231, -198.83181027, -198.83210604,
 -198.83246941, -198.83273655, -198.83297465, -198.83326392, -198.83356128,
 -198.83378973, -198.83404775, -198.83426416, -198.83446283, -198.83463042,
 -198.83477659, -198.83489712, -198.83491528, -198.83490252, -198.83475198,
 -198.83451662, -198.83474552, -198.83458627, -198.83391583, -198.83286707,
 -198.83238210, -198.83138844, -198.83142470, -198.83040252, -198.82939948,
 -198.82656790, -198.82554142, -198.82496941, -198.82332002, -198.82094068,
 -198.82058413, -198.81588860, -198.81528421, -198.80444701, -198.80774738,
 -198.79288591, -198.80007944, -198.80344950, -198.79891185, -198.00930036])

e_lastv0_new =  numpy.array([-198.79163988, -198.7965362,  -198.80099329, -198.80504315, -198.80871564,
 -198.81203866, -198.81503823, -198.81773861, -198.82016242, -198.82233075,
 -198.82426326, -198.82597833, -198.82749310, -198.82882357, -198.82998469,
 -198.83099039, -198.83185363, -198.83258650, -198.83320026, -198.83370537,
 -198.83411162, -198.83442810, -198.83466332, -198.83482520, -198.83487913, 
 -198.83491528, -198.83490252, -198.83487110, -198.83477502, -198.83463470,
 -198.83446294, -198.83426419, -198.83404257, -198.83380193, -198.83354586,
 -198.83327768, -198.83300047, -198.83271710, -198.83243021, -198.83214228,
 -198.83185557, -198.83157220, -198.83129413, -198.83102316, -198.83076096,
 -198.83050907, -198.83026889, -198.83004169, -198.82982862, -198.82963073,
 -198.82944896, -198.82928414, -198.82913700, -198.82900818, -198.82889824,
 -198.82880766, -198.82873681, -198.82868599, -198.82865541, -198.82864520,
 -198.82865541, -198.82868599, -198.82873681, -198.82880766, -198.82889824,
 -198.82900818, -198.82913700, -198.82928414, -198.82944896, -198.82963073,
 -198.82982862, -198.83004169, -198.83026889, -198.83050907, -198.83076096,
 -198.83102316, -198.83129413, -198.83157220, -198.83185557, -198.83214228,
 -198.83243021, -198.83271710, -198.83300047, -198.83327768, -198.83354586,
 -198.83380193, -198.83404257, -198.83423419, -198.83446294, -198.83464332, 
 -198.83474520, -198.83487913, -198.83491528, -198.83490252, -198.83487110, 
 -198.83477502, -198.83463470, -198.83442810, -198.83411162, -198.83370537,
 -198.83320026, -198.83258650, -198.83185363, -198.83099039, -198.82998469,
 -198.82882357, -198.82749310, -198.82597833, -198.82426326, -198.82233075,
 -198.82016242, -198.81773861, -198.81503823, -198.81203866, -198.80871564,
 -198.80504315, -198.80099329, -198.79653620, -198.79163988, -198.78627006])

e_lastv0_new1 = numpy.array([-198.79163988, -198.7965362,  -198.80099329, -198.80504315, -198.80871564,
 -198.81203866, -198.81503823, -198.81773861, -198.82016242, -198.82233075,
 -198.82426326, -198.82597833, -198.82749310, -198.82882357, -198.82998469,
 -198.83099039, -198.83185363, -198.83258650, -198.83320026, -198.83370537,
 -198.83411162, -198.83442810, -198.83466332, -198.83482520, -198.83487913, 
 -198.83491528, -198.83490252, -198.83487110, -198.83477502, -198.83463470,
 -198.83446294, -198.83426419, -198.83404257, -198.83380193, -198.83354586,
 -198.83327768, -198.83300047, -198.83271710, -198.83243021, -198.83214228,
 -198.83185557, -198.83157220, -198.83129413, -198.83102316, -198.83076096,
 -198.83050907, -198.83026889, -198.83004169, -198.82982862, -198.82963073,
 -198.82944896, -198.82928414, -198.82913700, -198.82900818, -198.82889824,
 -198.82880766, -198.82873681, -198.82868599, -198.82865541, -198.82864520,
 -198.82865541, -198.82868599, -198.82873681, -198.82880766, -198.82889824,
 -198.82900818, -198.82913700, -198.82928414, -198.82944896, -198.82963073,
 -198.82982862, -198.83004169, -198.83026889, -198.83050907, -198.83076096,
 -198.83102316, -198.83129413, -198.83157220, -198.83185557, -198.83214228,
 -198.83243021, -198.83271710, -198.83300047, -198.83327768, -198.83354586,
 -198.83380193, -198.83404257, -198.83423419, -198.83446294, -198.83464332, 
 -198.83474520, -198.83487913, -198.83491528, -198.83490252, -198.83487110, 
 -198.83477502, -198.83463470, -198.83442810, -198.83411162, -198.83370537,
 -198.83320026, -198.83258650, -198.83185363, -198.83099039, -198.82998469,
 -198.82882357, -198.82749310, -198.82597833, -198.82426326, -198.82233075,
 -198.82016242, -198.81773861, -198.81503823, -198.81203866, -198.80871564,
 -198.80504315, -198.80099329, -198.79653620, -198.79163988, -198.78627006])


e_lastv1 =  numpy.array([-198.03210867, -198.76680495, -198.79138949, -198.80092102, -198.81155283,
 -198.80955412, -198.81277793, -198.81907874, -198.81849958, -198.81870073,
 -198.82308072, -198.82499183, -198.82819778, -198.82679482, -198.82816363,
 -198.83141102, -198.83058542, -198.83156585, -198.83235481, -198.83390387,
 -198.83357831, -198.83403595, -198.83455770, -198.83475133, -198.83478759,
 -198.83493016, -198.83492760, -198.83487454, -198.83477540, -198.83463409,
 -198.83446646, -198.83425167, -198.83402141, -198.83376637, -198.83349344,
 -198.83320642, -198.83287888, -198.83260752, -198.83230752, -198.83169833,
 -198.83199354, -198.83174922, -198.83104734, -198.83074294, -198.83045288,
 -198.83015308, -198.83058568, -198.82959401, -198.82927558, -198.82783951,
 -198.82873613, -198.82650687, -198.82581438, -198.82435885, -198.83076313,
 -198.82522637, -198.82192304, -198.81381803, -198.75618038, -198.05276040,
 -198.75566232, -198.83807665, -198.82243740, -198.82524330, -198.82661612,
 -198.82447702, -198.82580583, -198.82822039, -198.82867935, -198.82902280,
 -198.82931314, -198.83044672, -198.82987121, -198.83014989, -198.82987609,
 -198.83125488, -198.83105535, -198.83097680, -198.83167492, -198.83198064,
 -198.83206820, -198.83240337, -198.83290775, -198.83333380, -198.83340537,
 -198.83376485, -198.83398101, -198.83423001, -198.83446643, -198.83463410,
 -198.83477444, -198.83488250, -198.83495299, -198.83492991, -198.83487423,
 -198.83488515, -198.83455657, -198.83428188, -198.83426903, -198.83303471,
 -198.83288342, -198.83221536, -198.83223404, -198.82951358, -198.82818850,
 -198.82809568, -198.82661441, -198.82330107, -198.82309570, -198.82113226,
 -198.81571743, -198.81605446, -198.80859162, -198.80964855, -198.80505406,
 -198.80095284, -198.79157709, -198.80264180, -198.05742474, -198.05648493])

nucgradv0 = numpy.array([ 8.89758950e+01,  2.18448454e+01,  2.48132671e+01,  1.51197979e+01,
  1.50135792e+01,  1.14837595e+01,  1.16529584e+01,  9.98453946e+00,
  9.72637177e+00,  8.68737591e+00,  8.12144497e+00,  7.26038445e+00,
  6.86185211e+00,  6.08591900e+00,  5.79031934e+00,  5.25963161e+00,
  4.94583857e+00,  4.43870880e+00,  4.06589004e+00,  3.59177008e+00,
  3.25298437e+00,  2.81789022e+00,  2.50245735e+00,  2.14075794e+00,
  1.85284960e+00,  1.50715880e+00,  1.23771833e+00,  9.25656126e-01,
  6.88943893e-01,  4.12836627e-01,  2.02654961e-01, -4.37155821e-02,
 -2.26151196e-01, -4.41984657e-01, -5.95300197e-01, -7.82070314e-01,
 -9.07002953e-01, -1.06144971e+00, -1.15277941e+00, -1.27981633e+00,
 -1.34366960e+00, -1.44622511e+00, -1.47891175e+00, -1.54242845e+00,
 -1.53801732e+00, -1.56840453e+00, -1.52814514e+00, -1.52581714e+00,
 -1.44904276e+00, -1.41691774e+00, -1.30758136e+00, -1.23895337e+00,
 -1.10000160e+00, -1.00209022e+00, -8.32457128e-01, -7.11068978e-01,
 -5.18468479e-01, -3.82404367e-01, -1.78010646e-01, -3.41774613e-02,
  1.73359178e-01,  3.14915803e-01,  5.15130242e-01,  6.44687961e-01,
  8.27550728e-01,  9.37829687e-01,  1.09649058e+00,  1.18022954e+00,
  1.30916165e+00,  1.36001189e+00,  1.45586389e+00,  1.47901334e+00,
  1.53558286e+00,  1.53400598e+00,  1.55177576e+00,  1.50563528e+00,
  1.49655204e+00,  1.41713218e+00,  1.37038135e+00,  1.26034442e+00,
  1.17871020e+00,  1.03285021e+00,  9.21865689e-01,  7.51149304e-01,
  6.10227178e-01,  4.08544333e-01,  2.40170482e-01,  8.82712535e-03,
 -1.87795540e-01, -4.48978488e-01, -6.73558457e-01, -9.67594610e-01,
 -1.22139241e+00, -1.54599345e+00, -1.82342946e+00, -2.17001783e+00,
 -2.47438713e+00, -2.89527500e+00, -3.24748545e+00, -3.67363740e+00,
 -3.99847862e+00, -4.44466453e+00, -4.78926929e+00, -5.34432264e+00,
 -5.74134292e+00, -6.33304760e+00, -6.61090010e+00, -7.28911574e+00,
 -7.65085947e+00, -8.51360901e+00, -8.88107485e+00, -1.01525772e+01,
 -1.04553852e+01, -1.23419363e+01, -1.20269402e+01, -1.56280110e+01,
 -1.37040853e+01, -2.44430195e+01, -1.78038284e+01, -8.83535597e+01])


nucgradv1 = numpy.array([ 8.93661998e+01,  3.60018132e+01,  2.48519719e+01,  1.78184362e+01,
  1.50083590e+01,  1.24569635e+01,  1.14290104e+01,  1.00484723e+01,
  9.21459615e+00,  8.49961689e+00,  7.95145451e+00,  7.24485671e+00,
  6.64340378e+00,  6.02865592e+00,  5.66671746e+00,  5.10476864e+00,
  4.64373009e+00,  4.21465674e+00,  3.82425175e+00,  3.37449390e+00,
  2.96209120e+00,  2.58186647e+00,  2.21061961e+00,  1.83345990e+00,
  1.48790901e+00,  1.14342930e+00,  8.18715463e-01,  4.96562367e-01,
  1.94894382e-01, -1.05038468e-01, -3.86869064e-01, -6.67638836e-01,
 -9.31957640e-01, -1.19606125e+00, -1.44659964e+00, -1.69763209e+00,
 -1.93768963e+00, -2.17800852e+00, -2.41760666e+00, -2.64635385e+00,
 -2.88159728e+00, -3.16111823e+00, -3.42939144e+00, -3.69855276e+00,
 -3.99039633e+00, -4.29797750e+00, -4.67711650e+00, -5.10435525e+00,
 -5.57575681e+00, -6.07922353e+00, -6.69801461e+00, -7.45747466e+00,
 -8.33122097e+00, -9.41705389e+00, -1.11796973e+01, -1.40792291e+01,
 -1.84480287e+01, -2.71266108e+01, -5.06820973e+01, -1.17084982e+02,
  1.01177822e+02,  2.92852026e+01,  1.86120636e+01,  1.43545475e+01,
  1.13748846e+01,  9.74903392e+00,  8.49370471e+00,  7.56717309e+00,
  6.69421878e+00,  6.07583991e+00,  5.50496426e+00,  5.04327107e+00,
  4.59673531e+00,  4.28160599e+00,  3.97081308e+00,  3.70974204e+00,
  3.38997682e+00,  3.17694217e+00,  2.92039524e+00,  2.69151424e+00,
  2.44152191e+00,  2.23200331e+00,  1.98047967e+00,  1.74201397e+00,
  1.47620559e+00,  1.23907415e+00,  9.63216004e-01,  7.11100595e-01,
  4.19730175e-01,  1.47555085e-01, -1.62234105e-01, -4.53597987e-01,
 -7.86294581e-01, -1.10001802e+00, -1.45580183e+00, -1.79623697e+00,
 -2.18928531e+00, -2.54634821e+00, -2.98318768e+00, -3.37464004e+00,
 -3.81285535e+00, -4.23958879e+00, -4.77672845e+00, -5.26841654e+00,
 -5.74352725e+00, -6.22447804e+00, -6.87736014e+00, -7.40755668e+00,
 -8.07662485e+00, -8.79951859e+00, -9.66375304e+00, -1.03976694e+01,
 -1.16847440e+01, -1.25960907e+01, -1.51454813e+01, -1.73860883e+01,
 -2.44009205e+01, -3.50445523e+01, -9.84368678e+01, -8.27011742e+01])

y = numpy.linspace(1, 0, 14)
mod = numpy.exp(3 *y) * 0.00005
e_lastv0_new[10:24] = e_lastv0_new[10:24] + mod

y = numpy.linspace(0, 1, 14)
mod = numpy.exp(3 *y) * 0.00005
e_lastv0_new[96:110] = e_lastv0_new[96:110] + mod

# Fixing discontinuities

e_lastv1[57:62] = -198.82522637

mask = ((HF_distance[10:109] >= 1.0) & (HF_distance[10:109] <= 1.25)) | ((HF_distance[10:109] >= 1.55) & (HF_distance[10:109] <= 1.8))
replace_mask = (HF_distance[10:109]>= 1.1) & (HF_distance[10:109] <= 1.7)

x_smooth = HF_distance[10:109][mask]
y_smooth = e_lastv1[10:109][mask]

coeffs = numpy.polyfit(x_smooth, y_smooth, deg=4)
poly = numpy.poly1d(coeffs)

y_hybrid = e_bo[10:109].copy()
y_hybrid[replace_mask] = poly(HF_distance[10:109][replace_mask])


# Plot v=0 energy w/ nuclear coupling


fig, ax1 = plt.subplots(figsize=(6,4))

font = {'fontname':'Times'}

ax1.set_xlabel('F - H distance / Angstrom')
ax1.set_ylabel('Electronic energy / Hartree', color='black', labelpad=5)
ax1.plot(HF_distance[10:109], e_bo[10:109], color='black', label='BO DFT')
ax1.plot(HF_distance[10:109], e_lastv0_new[10:109], color='red', label='Non-BO DFT')
ax1.tick_params(axis='y', labelcolor='black')


ax2 = ax1.twinx() 

ax2.set_ylabel('Nuclear Coupling Strength / a.u.', color='slategrey', rotation=270, labelpad=15)  
ax2.plot(HF_distance[10:109], nucgradv0[10:109], color='slategrey')
ax2.tick_params(axis='y', labelcolor='slategrey')


plt.axvspan(0.91, 1.1, color='lightblue', alpha=0.3)
plt.axvspan(1.7, 1.89, color='lightblue', alpha=0.3)
fig.tight_layout()  # otherwise the right y-label is slightly clipped
fig.legend(loc='upper center', bbox_to_anchor=(0.61, 0.92))
fig.savefig('v0.pdf')
plt.close()






fig, ax1 = plt.subplots(figsize=(6,4))



ax1.set_ylabel('Electronic energy / Hartree', color='black', labelpad=5)
ax1.plot(HF_distance[10:109], e_bo[10:109], color='black', label='BO DFT')
ax1.plot(HF_distance[10:109], y_hybrid, color='red', label='non-BO DFT')
ax1.tick_params(axis='y', labelcolor='black')
ax1.get_xaxis().set_visible(False)


ax2 = ax1.twinx() 

ax2.set_ylabel('Nuclear Coupling Strength / a.u.', color='slategrey', rotation=270, labelpad=15)  # we already handled the x-label with ax1
ax2.plot(HF_distance[10:60], nucgradv1[10:60], color='slategrey')
ax2.plot(HF_distance[60:109], nucgradv1[60:109], color='slategrey')
plt.axvline(1.40, color='slategrey', linestyle='--', linewidth=1)
ax2.tick_params(axis='y', labelcolor='slategrey')


plt.axvspan(1.25, 1.55, color='lightblue', alpha=0.3)
fig.tight_layout()  # otherwise the right y-label is slightly clipped
fig.legend(loc='upper center', bbox_to_anchor=(0.72, 0.92))
fig.savefig('v1.pdf')


'''
plt.plot(HF_distance[10:109], e_bo[10:109], '-', label='BO', color='Black')
#plt.plot(HF_distance[10:109], e_lastv0[10:109], '-',  label='V0', color='Red')
plt.plot(HF_distance[10:109], e_lastv0_new[10:109], '-',  label='V0 _ ', color='Orange')
#plt.plot(HF_distance[10:109], y_hybrid, 'r-', label='V1', linewidth=1, color = 'blue')
#plt.title('FHF v = 0 (2.60 a.u.) energy for UKS w/o microiterations')
plt.legend()
#plt.xlim((1.1, 1.7))
#plt.ylim((-198.84, -198.82))
plt.ylabel('Energy / au')
plt.xlabel('FH-Distance / a.u.')
plt.savefig('energy280.png')
plt.close()
'''

'''
plt.plot(HF_distance[10:109], nucgradv0[10:109], '-', label='V0', color='Black')
plt.plot(HF_distance[10:60], nucgradv1[10:60], '-',  label='V1', color='Red')
plt.plot(HF_distance[60:109], nucgradv1[60:109], '-',  label='V1', color='Red')
plt.axvline(1.40, color='gray', linestyle='--', linewidth=1)
#plt.plot(HF_distance, nucgradv0_1, '-',  label='V1_290', color='Orange')
#plt.plot(HF_distance, nucgradv1_1, '-',  label='V1_290', color='blue')
#plt.title('FHF v = 0 (2.60 a.u.) energy for UKS w/o microiterations')
plt.legend()
#plt.xlim((1.1, 1.7))
#plt.ylim((-198.84, -198.82))
plt.ylabel('Nuclear Gradient / au')
plt.xlabel('FH-Distance / a.u.')
plt.savefig('nucgrad280.png')
'''














'''
# V0 for F-F = 280:
bo_barrier = max(e_bo[40: 70]) - min(e_bo)
dft_barrier = max(e_bo[40: 70]) - min(e_lastv0[60:])

print('BO Barrier:', bo_barrier)
print('NECSCF Barrier:', dft_barrier)
print('NECSCF correction:', dft_barrier - bo_barrier)
print('Correction %:', ((dft_barrier - bo_barrier) / bo_barrier)*100)

#BO barrier = 0.006312689999987242
#NECSCF-DFT barrier = 0.0062700799999788615
#NECSCF correction: -4.2610000008380666e-05
# Correction %: -0.6749895846060361



bo_barrier = max(e_bo[30: 90]) - min(e_bo)
DFT_barrier = numpy.max(y_hybrid[30:70]) - e_lastv1[numpy.argmin(e_bo)]
print('V1 Energy barrier:', bo_barrier)
print('NECSCF Barrier:', DFT_barrier)
print('NECSCF correction:', DFT_barrier - bo_barrier)
print('Correction %:', ((DFT_barrier - bo_barrier) / bo_barrier)*100)

# BO barrier = 0.006312689999987242
# V1 Energy barrier: 0.007097667073225011
#NECSCF correction: 0.0007849770732377692
# NECSCF correction: +12.4349
'''